{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleAuth","provider","firebase","auth","GoogleAuthProvider","signInWithPopup","then","result","console","log","user","email","catch","error","code","message","handleLogout","signOut","renderLoginButton","state","src","photoURL","alt","displayName","onClick","bind","className","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gTA8EeA,G,kBAzEb,aAAc,IAAD,8BACX,+CAqBFC,WAAa,WAEX,IAAMC,EAAW,IAAIC,IAASC,KAAKC,mBAGnCF,IAASC,OAAOE,gBAAgBJ,GAC7BK,MAAK,SAAAC,GAAM,OAAIC,QAAQC,IAAR,UAAeF,EAAOG,KAAKC,MAA3B,8BACfC,OAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAR,gBAAqBI,EAAMC,KAA3B,aAAoCD,EAAME,cA7BjD,EAgCbC,aAAe,WACbd,IAASC,OAAOc,UACfX,MAAK,SAAAC,GAAM,OAAIC,QAAQC,IAAR,UAAeF,EAAOG,KAAKC,MAA3B,kBACfC,OAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAR,gBAAqBI,EAAMC,KAA3B,aAAoCD,EAAME,cAnC/C,EAwCbG,kBAAoB,WAElB,OAAG,EAAKC,MAAMT,KAEZ,6BACE,yBAAKU,IAAK,EAAKD,MAAMT,KAAKW,SAAUC,IAAK,EAAKH,MAAMT,KAAKa,cACzD,mCAAS,EAAKJ,MAAMT,KAAKa,aACzB,4BAAQC,QAAS,EAAKR,cAAtB,UAMF,4BAAQQ,QAAS,EAAKxB,YAAtB,qBAnDF,EAAKmB,MAAQ,CACXT,KAAO,MAGT,EAAKV,WAAa,EAAKA,WAAWyB,KAAhB,gBAClB,EAAKT,aAAe,EAAKA,aAAaS,KAAlB,gBAPT,E,sEA4DX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,yCAEA,6BACGC,KAAKT,0B,GAnEEU,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAEjDnC,IAASoC,cAAc,CACnBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBDgHb,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.492f43ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport firebase from 'firebase';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      user : null\n    };\n\n    this.handleAuth = this.handleAuth.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n  }\n\n\n  // Este es un método del ciclo de vida de React - Se dispara una vez que el componente ha sido renderizado\n  // componentDidMount (){\n  //   firebase.auth().onAuthStateChanged(function (user) {\n  //     // setState modifica el estado\n  //     this.setState({\n  //       user : user\n  //     });\n  //   })\n  // }\n\n\n  handleAuth = () =>{\n    // Creando un proveedor de Google\n    const provider = new firebase.auth.GoogleAuthProvider();\n    \n    // signIn devuelve una promesa\n    firebase.auth().signInWithPopup(provider)\n      .then(result => console.log(`${result.user.email} ha iniciado sesión`))\n      .catch(error => console.log(`Error ${error.code}: ${error.message}`))\n  } \n\n  handleLogout = () => {\n    firebase.auth().signOut()\n    .then(result => console.log(`${result.user.email} ha salido`))\n    .catch(error => console.log(`Error ${error.code}: ${error.message}`))\n  } \n\n  \n\n  renderLoginButton = () => {\n    // Si el usuario está logueado puede hacer una cosa\n    if(this.state.user) {\n      return(\n      <div>\n        <img src={this.state.user.photoURL} alt={this.state.user.displayName} />\n        <p>Hola {this.state.user.displayName}</p>\n        <button onClick={this.handleLogout}>Salir</button>\n      </div>\n      );\n    }else{\n     // Si no está logueado, no puede\n     return(\n      <button onClick={this.handleAuth}>Login con Google</button>\n     )\n    }\n  }\n      \n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <h1>together</h1>\n        </header>\n        <div>\n          {this.renderLoginButton()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport firebase from 'firebase';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyAUiPvjf8hMhZ4_tuYz84X26vwbp097698\",   \n    authDomain: \"togetherclickreact.firebaseapp.com\",\n    databaseURL: \"https://togetherclickreact.firebaseio.com\",\n    projectId: \"togetherclickreact\",\n    storageBucket: \"togetherclickreact.appspot.com\",\n    messagingSenderId: \"315485589831\",\n    appId: \"1:315485589831:web:9c56f31efbbe91ee667c62\",\n    measurementId: \"G-WEDEC3ML7D\"\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}